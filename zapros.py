from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove, InputMediaPhoto, MenuButtonCommands, BotCommand
)
import asyncio
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –ò–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ä—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
WORKERS = ['Bashmak', 'ilia', 'Viktor', 'AndreyGeo', 'Denis', 'Igor', 'Atrem', 'Grigoriy', 'Dyusha']
MANAGERS = ['Dima', 'Masha', 'Olka']

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATES = {
    "CATEGORY": "category",
    "MANAGER": "manager",
    "REQUEST_ID": "request_id",
    "AMOUNT": "amount",
    "BANK_FROM": "bank_from",
    "BANK_TO": "bank_to",
    "REASON": "reason",
    "SCREENSHOTS": "screenshots",
    "NAME_ON_PLATFORM": "name_platform",
    "NAME_ON_DETAILS": "name_details",
    "SHIFT_MANAGER": "shift_manager",
    "STAGE": "stage",
    "COMMENT": "comment",
}
MANAGER_CHAT_IDS = {
    "Dima": 7367191192 ,
    "Masha": 874826440 ,
    "Olka": 950905671
    
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–ø–ª–∞—Ç–∞", callback_data="overpayment")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞ —Ç–æ—Ç –±–∞–Ω–∫", callback_data="wrong_bank")],
        [InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="wrong_details")],
        [InlineKeyboardButton("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="funds_received")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data.clear()

    if update.message:
        await update.message.reply_text(
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫",
            reply_markup=reply_markup
        )

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data
    context.user_data[STATES["CATEGORY"]] = category
    context.user_data[STATES["STAGE"]] = "select_worker"

    keyboard = [[InlineKeyboardButton(name, callback_data=f"worker_{name}")] for name in WORKERS]
    keyboard.append([InlineKeyboardButton("–ë–µ–∑ –∏–º–µ–Ω–∏", callback_data="worker_none")])  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))


async def select_worker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    worker = query.data.replace("worker_", "")
    if worker == "none":
        context.user_data[STATES["MANAGER"]] = None
    else:
        context.user_data[STATES["MANAGER"]] = worker

    category = context.user_data[STATES["CATEGORY"]]
    context.user_data[STATES["STAGE"]] = "request_id"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏:")


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    stage = context.user_data.get(STATES["STAGE"])
    category = context.user_data.get(STATES["CATEGORY"])

    if stage == "request_id":
        context.user_data[STATES["REQUEST_ID"]] = text
        if category == "overpayment" or category == "funds_received":
            context.user_data[STATES["STAGE"]] = "amount"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        elif category == "wrong_bank":
            context.user_data[STATES["STAGE"]] = "bank_to"
            await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –±–∞–Ω–∫ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
        elif category == "wrong_details":
            context.user_data[STATES["STAGE"]] = "reason"
            keyboard = [
                [InlineKeyboardButton("–ù–µ—Ç –±–∞–Ω–∫–∞ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö", callback_data="no_bank")],
                [InlineKeyboardButton("–†–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞", callback_data="diff_names")],
                [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –Ω–æ–º–µ—Ä", callback_data="bad_number")],
            ]
            await update.message.reply_text("–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif stage == "amount":
        context.user_data[STATES["AMOUNT"]] = text
        if category == "funds_received":
            context.user_data[STATES["STAGE"]] = "choose_manager"
            keyboard = [[InlineKeyboardButton(name, callback_data=f"sendto_{name}")] for name in MANAGERS]
            await update.message.reply_text("–ö—Ç–æ —Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–º–µ–Ω–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            context.user_data[STATES["STAGE"]] = "screenshot"
            await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ")

    elif stage == "bank_to":
        context.user_data[STATES["BANK_TO"]] = text
        context.user_data[STATES["STAGE"]] = "bank_from"
        await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –±–∞–Ω–∫ –ø–µ—Ä–µ–≤–µ–ª–∏ –ø–æ —Ñ–∞–∫—Ç—É:")

    elif stage == "bank_from":
        context.user_data[STATES["BANK_FROM"]] = text
        context.user_data[STATES["STAGE"]] = "screenshot"
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ")

    elif stage == "name_platform":
        context.user_data[STATES["NAME_ON_PLATFORM"]] = text
        context.user_data[STATES["STAGE"]] = "name_details"
        await update.message.reply_text("–ö–∞–∫–æ–µ –∏–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö?")

    elif stage == "name_details":
        context.user_data[STATES["NAME_ON_DETAILS"]] = text
        context.user_data[STATES["STAGE"]] = "screenshot"
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ")

    elif stage == "bad_number_comment":
        context.user_data[STATES["COMMENT"]] = text
        context.user_data[STATES["STAGE"]] = "choose_manager"
        keyboard = [[InlineKeyboardButton(name, callback_data=f"sendto_{name}")] for name in MANAGERS]
        await update.message.reply_text("–ö—Ç–æ —Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–º–µ–Ω–µ?", reply_markup=InlineKeyboardMarkup(keyboard))


async def wrong_details_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    reason = query.data

    if reason == "no_bank":
        context.user_data[STATES["REASON"]] = "–ù–µ—Ç –±–∞–Ω–∫–∞ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö"
        context.user_data[STATES["STAGE"]] = "screenshot"
        await query.edit_message_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ")
    
    elif reason == "diff_names":
        context.user_data[STATES["REASON"]] = "–†–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞"
        context.user_data[STATES["STAGE"]] = "name_platform"
        await query.edit_message_text("–ö–∞–∫–æ–µ –∏–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ?")
    
    elif reason == "bad_number":
        context.user_data[STATES["REASON"]] = "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –Ω–æ–º–µ—Ä"
        context.user_data[STATES["STAGE"]] = "bad_number_comment"
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞:")

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stage = context.user_data.get(STATES["STAGE"])
    if stage == "screenshot":
        if STATES["SCREENSHOTS"] not in context.user_data:
            context.user_data[STATES["SCREENSHOTS"]] = []

        photo_id = update.message.photo[-1].file_id
        context.user_data[STATES["SCREENSHOTS"]].append(photo_id)

        # "–ì–æ—Ç–æ–≤–æ"
        if not context.user_data.get("photos_acknowledged"):
            keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="screenshots_done")]]
            await update.message.reply_text(
                "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\".",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data["photos_acknowledged"] = True

async def screenshots_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data[STATES["STAGE"]] = "choose_manager"
    keyboard = [[InlineKeyboardButton(name, callback_data=f"sendto_{name}")] for name in MANAGERS]
    await query.edit_message_text("–ö—Ç–æ —Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–º–µ–Ω–µ?", reply_markup=InlineKeyboardMarkup(keyboard))

async def send_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    shift_manager = query.data.replace("sendto_", "")
    context.user_data[STATES["SHIFT_MANAGER"]] = shift_manager
    user_data = context.user_data
    category = user_data[STATES["CATEGORY"]]
    screenshots = user_data.get(STATES["SCREENSHOTS"], [])
    sender = user_data.get(STATES["MANAGER"])

    # –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if sender:
        sender_line = f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç: {sender}\n\n"
    else:
        sender_line = ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if category == "overpayment":
        message_text = (
            f"{sender_line}"
            f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
            f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {user_data[STATES['AMOUNT']]}\n"
            f"–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:"
        )

    elif category == "wrong_bank":
        message_text = (
            f"{sender_line}"
            f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –Ω–∞ —Ç–æ—Ç –±–∞–Ω–∫\n"
            f"–ù—É–∂–Ω–æ –±—ã–ª–æ: {user_data[STATES['BANK_TO']]}\n"
            f"–ü–µ—Ä–µ–≤–µ–ª–∏ –Ω–∞: {user_data[STATES['BANK_FROM']]}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –Ω–∞ —Ç–æ—Ç –±–∞–Ω–∫"
        )

    elif category == "wrong_details":
        reason = user_data[STATES["REASON"]]
        if reason == "–ù–µ—Ç –±–∞–Ω–∫–∞ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö":
            message_text = (
                f"{sender_line}"
                f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
                f"–ù–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–Ω–∫"
            )
        elif reason == "–†–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞":
            message_text = (
                f"{sender_line}"
                f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
                f"–†–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞\n"
                f"–í –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {user_data[STATES['NAME_ON_PLATFORM']]}\n"
                f"–ù–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö: {user_data[STATES['NAME_ON_DETAILS']]}"
            )
        elif reason == "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –Ω–æ–º–µ—Ä":
            message_text = (
                f"{sender_line}"
                f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
                f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –Ω–æ–º–µ—Ä\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data[STATES['COMMENT']]}"
            )

    elif category == "funds_received":
        message_text = (
            f"{sender_line}"
            f"–ó–∞—è–≤–∫–∞ ID: {user_data[STATES['REQUEST_ID']]}\n"
            f"–ü—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ {user_data[STATES['AMOUNT']]}"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    chat_id = MANAGER_CHAT_IDS.get(shift_manager)
    if chat_id:
        if screenshots:
            media = [InputMediaPhoto(photo_id) for photo_id in screenshots]
            await context.bot.send_media_group(chat_id=chat_id, media=media)
        await context.bot.send_message(chat_id=chat_id, text=message_text)
    else:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: chat_id —Å—Ç–∞—Ä—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å", callback_data="start")]]
    await query.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data.clear()



async def setup_menu(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
    ])
    await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

def main():
    app = Application.builder().token("7551888806:AAF753-UcVdFJGJlsV__6l3WTb9H_tCQNxY").build()
    asyncio.get_event_loop().run_until_complete(setup_menu(app))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start, pattern="^start$"))
    app.add_handler(CallbackQueryHandler(menu_callback, pattern="^(overpayment|wrong_bank|wrong_details|funds_received)$"))
    app.add_handler(CallbackQueryHandler(select_worker, pattern="^worker_"))
    app.add_handler(CallbackQueryHandler(wrong_details_reason, pattern="^(no_bank|diff_names|bad_number)$"))
    app.add_handler(CallbackQueryHandler(screenshots_done, pattern="^screenshots_done$"))
    app.add_handler(CallbackQueryHandler(send_to_manager, pattern="^sendto_"))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
